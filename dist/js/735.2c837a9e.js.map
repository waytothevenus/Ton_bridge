{"version":3,"file":"js/735.2c837a9e.js","mappings":"sPAYM,MAAOA,EAUXC,eAAA,mBATc,aAAU,oBACT,aAAU,mBACE,OAAI,wBACZ,KAAE,sBACJ,IAAC,2BACG,IAAK,8DAKxBC,KAAKC,SAAUC,EAAAA,EAAAA,KACfF,KAAKG,kBAAoBH,KAAKG,kBAAkBC,KAAKJ,MACrDA,KAAKK,eAAiBL,KAAKK,eAAeD,KAAKJ,MAC/CA,KAAKM,aAAeN,KAAKM,aAAaF,KAAKJ,MAC3CA,KAAKO,UAAYP,KAAKO,UAAUH,KAAKJ,KACvC,CAEAQ,GAA2BC,EAAUC,GACnC,OAAOV,KAAKC,QAAQO,GAAGC,EAAOC,EAChC,CAEAC,cAAcC,GACZ,IAAKC,OAAOC,SACV,MAAM,IAAIC,MAAM,0BAGlB,UACQF,OAAOC,SAASE,QAAQ,CAC5BC,OAAQ,4BACRL,OAAQ,CACN,CACEM,aAAc,CAAC,MAKrB,MAAMC,SAAkBN,OAAOC,SAASM,KAAK,wBAC1CC,OAEHrB,KAAKsB,UAAYH,EAAS,E,CAC1B,MAAOI,GACP,GAAe,OAAXA,EAAEC,KAGJ,OADAC,EAAQC,IAAIH,EAAEI,UACP,EAET,MAAM,IAAIZ,MAAMQ,EAAEI,Q,CAmBpB,OAhBA3B,KAAK4B,SAAUC,EAAAA,EAAAA,IAAahB,OAAOC,SAASgB,gBAM5C9B,KAAK+B,YAAclB,OAAOC,SAASiB,cACnC/B,KAAKgC,KAAO,IAAIC,IAAJ,CAASpB,OAAOC,UAE5Bd,KAAKkC,SAAW,IAAIC,EAAAA,EAAanC,KAAKgC,MAAMI,iBAE5CvB,OAAOC,SAASN,GAAG,kBAAmBR,KAAKG,mBAC3CU,OAAOC,SAASN,GAAG,eAAgBR,KAAKK,gBACxCQ,OAAOC,SAASN,GAAG,aAAcR,KAAKM,cACtCO,OAAOC,SAASN,GAAG,UAAWR,KAAKO,YAE5B,CACT,CAEAJ,kBAAkBgB,GAChBM,EAAQC,IAAI,iCAAkC1B,KAAKsB,WAC/CH,GAAYA,EAASkB,OACvBrC,KAAKsB,UAAYH,EAAS,GAE1BnB,KAAKsB,UAAY,GAEnBG,EAAQC,IAAI,iCAAkC1B,KAAKsB,WAIjDtB,KAAKM,aAAa,EAAG,GAEzB,CAEAD,eAAeuB,GACbH,EAAQC,IAAI,6BAA8B1B,KAAK4B,SAC/C5B,KAAK4B,SAAUC,EAAAA,EAAAA,IAAaD,GAC5BH,EAAQC,IAAI,6BAA8B1B,KAAK4B,SAC/C5B,KAAKM,aAAa,EAAG,GACvB,CAEAA,aAAakB,EAAcc,GACzBtC,KAAK+B,aAAc,EACnBN,EAAQC,IAAI,gBAEZb,OAAOC,SAASyB,qBAEhBvC,KAAKC,QAAQuC,KAAK,cAClBxC,KAAKC,QAAQwC,OAAS,CAAC,CACzB,CAEAlC,YACEP,KAAK+B,aAAc,EACnBN,EAAQC,IAAI,YACd,CAEAf,kBAAkBiB,GAChB,UACQf,OAAOC,SAASE,QAAQ,CAC5BC,OAAQ,6BACRL,OAAQ,CAAC,CAAEgB,QAAS,KAAOA,EAAQc,SAAS,O,CAE9C,MAAOnB,GAEP,OADAE,EAAQC,IAAIH,EAAEI,UACP,C,CAET,OAAO,CACT,CAEAgB,aAEE3C,KAAKM,aAAa,EAAG,GACvB,E","sources":["webpack://ton-token-bridge/./src/utils/providers/metamask/index.ts"],"sourcesContent":["import { Web3Provider } from \"@ethersproject/providers\";\nimport { createNanoEvents, Emitter } from \"nanoevents\";\nimport Web3 from \"web3\";\n\nimport { parseChainId } from \"@/utils/helpers\";\n\nimport { Provider } from \"../provider\";\n\ninterface Events {\n  disconnect: () => void;\n}\n\nexport class Metamask implements Provider {\n  public name = \"metamask\";\n  public title = \"Metamask\";\n  public web3: Web3 | null = null;\n  public myAddress = \"\";\n  public chainId = 0;\n  public isConnected = false;\n  private emitter: Emitter;\n  public provider?: Web3Provider;\n\n  constructor() {\n    this.emitter = createNanoEvents<Events>();\n    this.onAccountsChanged = this.onAccountsChanged.bind(this);\n    this.onChainChanged = this.onChainChanged.bind(this);\n    this.onDisconnect = this.onDisconnect.bind(this);\n    this.onConnect = this.onConnect.bind(this);\n  }\n\n  on<E extends keyof Events>(event: E, callback: Events[E]) {\n    return this.emitter.on(event, callback);\n  }\n\n  async connect(params: any): Promise<boolean> {\n    if (!window.ethereum) {\n      throw new Error(\"errors.installMetamask\");\n    }\n\n    try {\n      await window.ethereum.request({\n        method: \"wallet_requestPermissions\",\n        params: [\n          {\n            eth_accounts: {},\n          },\n        ],\n      });\n\n      const accounts = (await window.ethereum.send(\"eth_requestAccounts\"))\n        .result;\n\n      this.myAddress = accounts[0];\n    } catch (e: any) {\n      if (e.code === 4001) {\n        // soft error: User rejected the request.\n        console.log(e.message);\n        return false;\n      }\n      throw new Error(e.message);\n    }\n\n    this.chainId = parseChainId(window.ethereum.networkVersion);\n\n    // if (this.chainId !== params.chainId) {\n    //   await this.switchChain(params.chainId);\n    // }\n\n    this.isConnected = window.ethereum.isConnected();\n    this.web3 = new Web3(window.ethereum);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-non-null-asserted-optional-chain\n    this.provider = new Web3Provider(this.web3?.currentProvider! as any);\n\n    window.ethereum.on(\"accountsChanged\", this.onAccountsChanged);\n    window.ethereum.on(\"chainChanged\", this.onChainChanged);\n    window.ethereum.on(\"disconnect\", this.onDisconnect);\n    window.ethereum.on(\"connect\", this.onConnect);\n\n    return true;\n  }\n\n  onAccountsChanged(accounts: Array<string>) {\n    console.log(\"account changed, old address: \", this.myAddress);\n    if (accounts && accounts.length) {\n      this.myAddress = accounts[0];\n    } else {\n      this.myAddress = \"\";\n    }\n    console.log(\"account changed, new address: \", this.myAddress);\n\n    // metamask doesn't fire disconnect event if all accounts has been disconnected, so we need to do it explicitly\n    // if (!this.myAddress) {\n      this.onDisconnect(0, \"\");\n    // }\n  }\n\n  onChainChanged(chainId: number | string) {\n    console.log(\"chain changed, old chain: \", this.chainId);\n    this.chainId = parseChainId(chainId);\n    console.log(\"chain changed, new chain: \", this.chainId);\n    this.onDisconnect(0, \"\");\n  }\n\n  onDisconnect(code: number, reason: string) {\n    this.isConnected = false;\n    console.log(\"disconnected\");\n\n    window.ethereum.removeAllListeners();\n\n    this.emitter.emit(\"disconnect\");\n    this.emitter.events = {};\n  }\n\n  onConnect() {\n    this.isConnected = true;\n    console.log(\"connected\");\n  }\n\n  async switchChain(chainId: number): Promise<boolean> {\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: \"0x\" + chainId.toString(16) }],\n      });\n    } catch (e: any) {\n      console.log(e.message);\n      return false;\n    }\n    return true;\n  }\n\n  disconnect() {\n    // metamask has no disconnect method, strange, so simply report to FE about disconnect\n    this.onDisconnect(0, \"\");\n  }\n}\n"],"names":["Metamask","constructor","this","emitter","createNanoEvents","onAccountsChanged","bind","onChainChanged","onDisconnect","onConnect","on","event","callback","async","params","window","ethereum","Error","request","method","eth_accounts","accounts","send","result","myAddress","e","code","console","log","message","chainId","parseChainId","networkVersion","isConnected","web3","Web3","provider","Web3Provider","currentProvider","length","reason","removeAllListeners","emit","events","toString","disconnect"],"sourceRoot":""}